#!/usr/bin/env node

import https from 'https';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const DUCKDUCKGO_BANG_URL = 'https://duckduckgo.com/bang.js';
const BANG_FILE_PATH = path.join(__dirname, '..', 'src', 'bang.ts');

/**
 * Fetch data from DuckDuckGo's bang.js API
 */
function fetchBangData() {
  return new Promise((resolve, reject) => {
    console.log('Fetching bang data from DuckDuckGo...');
    
    const req = https.get(DUCKDUCKGO_BANG_URL, (res) => {
      let data = '';
      
      // Check if the request was successful
      if (res.statusCode !== 200) {
        reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));
        return;
      }
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          // Parse the JSON array from the response
          const bangData = JSON.parse(data);
          
          // Validate that we got an array
          if (!Array.isArray(bangData)) {
            reject(new Error('Expected array response from DuckDuckGo API'));
            return;
          }
          
          // Validate that we have some data
          if (bangData.length === 0) {
            reject(new Error('No bangs returned from DuckDuckGo API'));
            return;
          }
          
          console.log(`Fetched ${bangData.length} bangs from DuckDuckGo`);
          resolve(bangData);
        } catch (error) {
          reject(new Error(`Failed to parse JSON: ${error.message}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(new Error(`HTTP request failed: ${error.message}`));
    });
    
    // Set a timeout
    req.setTimeout(30000, () => {
      req.destroy();
      reject(new Error('Request timeout after 30 seconds'));
    });
  });
}

/**
 * Convert DuckDuckGo bang format to our format
 * DuckDuckGo format: {"c":"Tech","d":"www.01net.com","r":0,"s":"01net","sc":"Downloads (apps)","t":"01net","u":"http://..."}
 * Our format: {t: "01net", s: "01net", u: "http://...", d: "www.01net.com"}
 */
function convertBangFormat(duckduckgoBangs) {
  console.log('Converting bang format...');
  
  return duckduckgoBangs
    .filter(bang => {
      // Filter out bangs that don't have required fields
      return bang.t && bang.s && bang.u && bang.d;
    })
    .map(bang => ({
      t: bang.t,  // trigger
      s: bang.s,  // name/description
      u: bang.u,  // url template
      d: bang.d   // domain
    }));
}

/**
 * Generate the TypeScript file content
 */
function generateBangFileContent(bangs) {
  console.log('Generating TypeScript file content...');
  
  const bangEntries = bangs.map(bang => {
    // Escape quotes and backslashes in strings
    const escapedT = bang.t.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
    const escapedS = bang.s.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
    const escapedU = bang.u.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
    const escapedD = bang.d.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
    
    return `{
  t: "${escapedT}",
  s: "${escapedS}",
  u: "${escapedU}",
  d: "${escapedD}"
}`;
  }).join(',\n');

  return `// This file is auto-generated by scripts-for-workflow/update-ddg-bangs.js
// Do not edit manually - changes will be overwritten
// Last updated: ${new Date().toISOString()}

export const bangs = [
${bangEntries}
];
`;
}

/**
 * Write the updated bang file
 */
function writeBangFile(content) {
  console.log(`Writing updated bang file to ${BANG_FILE_PATH}...`);
  
  try {
    // Ensure the directory exists
    const dir = path.dirname(BANG_FILE_PATH);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    fs.writeFileSync(BANG_FILE_PATH, content, 'utf8');
    console.log('Bang file updated successfully!');
  } catch (error) {
    throw new Error(`Failed to write bang file: ${error.message}`);
  }
}

/**
 * Main function
 */
async function main() {
  try {
    console.log('Starting bang list update...');
    
    // Fetch data from DuckDuckGo
    const duckduckgoBangs = await fetchBangData();
    
    // Convert to our format
    const convertedBangs = convertBangFormat(duckduckgoBangs);
    
    if (convertedBangs.length === 0) {
      throw new Error('No valid bangs found after conversion');
    }
    
    // Generate file content
    const fileContent = generateBangFileContent(convertedBangs);
    
    // Write to file
    writeBangFile(fileContent);
    
    console.log(`✅ Successfully updated bang list with ${convertedBangs.length} entries`);
    
  } catch (error) {
    console.error('❌ Error updating bang list:', error.message);
    process.exit(1);
  }
}

// Run the script
main(); 
