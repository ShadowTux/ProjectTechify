name: Update Bang List

on:
  schedule:
    # Run on the 1st of every month at 2 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [main, master]
    paths: ['.github/workflows/update-ddg-bangs.yml'] # Run when this workflow is updated

jobs:
  update-bangs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Create scripts directory
        run: mkdir -p scripts
        
      - name: Create update script
        run: |
          cat > scripts/update-bangs.js << 'EOF'
          const https = require('https');
          const fs = require('fs');
          const path = require('path');

          const DDG_BANG_URL = 'https://duckduckgo.com/bang.js';
          const OUTPUT_FILE = 'src/bang.ts';

          function fetchBangs() {
            return new Promise((resolve, reject) => {
              console.log('Fetching bangs from DuckDuckGo...');
              
              https.get(DDG_BANG_URL, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                  data += chunk;
                });
                
                res.on('end', () => {
                  try {
                    console.log('Successfully fetched bang data');
                    resolve(data);
                  } catch (error) {
                    reject(error);
                  }
                });
              }).on('error', (error) => {
                reject(error);
              });
            });
          }

          function parseBangs(jsContent) {
            console.log('Parsing bang data...');
            
            // Multiple parsing strategies for DDG bang.js
            let bangArray = null;
            
            // Strategy 1: Look for direct array assignment
            let match = jsContent.match(/\[\s*{[^}]*"c"[^}]*}[^\]]*\]/);
            if (match) {
              try {
                bangArray = JSON.parse(match[0]);
                console.log('Successfully parsed using strategy 1');
              } catch (e) {
                console.log('Strategy 1 failed, trying strategy 2');
              }
            }
            
            // Strategy 2: Look for variable assignment
            if (!bangArray) {
              match = jsContent.match(/(?:var\s+\w+\s*=\s*|\w+\s*:\s*)(\[\s*{[^}]*"c"[^}]*}[^\]]*\])/);
              if (match) {
                try {
                  bangArray = JSON.parse(match[1]);
                  console.log('Successfully parsed using strategy 2');
                } catch (e) {
                  console.log('Strategy 2 failed, trying strategy 3');
                }
              }
            }
            
            // Strategy 3: Extract and clean JSON
            if (!bangArray) {
              match = jsContent.match(/\[\s*{[\s\S]*}\s*\]/);
              if (match) {
                try {
                  let cleanJson = match[0]
                    .replace(/'/g, '"')
                    .replace(/(\w+):/g, '"$1":')
                    .replace(/,\s*}/g, '}')
                    .replace(/,\s*\]/g, ']');
                  
                  bangArray = JSON.parse(cleanJson);
                  console.log('Successfully parsed using strategy 3');
                } catch (e) {
                  console.error('All parsing strategies failed:', e);
                  return null;
                }
              }
            }
            
            if (!bangArray || !Array.isArray(bangArray)) {
              console.error('Failed to parse bang array');
              return null;
            }
            
            console.log(`Parsed ${bangArray.length} bangs from DuckDuckGo`);
            return bangArray;
          }

          function generateTypeScriptFile(bangArray) {
            console.log('Generating TypeScript file...');
            
            const timestamp = new Date().toISOString();
            const header = `// This file is auto-generated by .github/workflows/update-ddg-bangs.yml
          // Do not edit manually - changes will be overwritten
          // Last updated: ${timestamp}

          export const bangs = [`;
            
            const footer = `];

          export default bangs;`;
            
            const bangObjects = bangArray.map(bang => {
              const obj = {
                t: bang.t,
                s: bang.s,
                u: bang.u,
                d: bang.d
              };
              
              // Add optional fields if they exist
              if (bang.c) obj.c = bang.c;
              if (bang.sc) obj.sc = bang.sc;
              if (bang.r !== undefined) obj.r = bang.r;
              
              return JSON.stringify(obj, null, 2);
            });
            
            const content = header + '\n' + bangObjects.join(',\n') + '\n' + footer;
            
            return content;
          }

          async function main() {
            try {
              // Create src directory if it doesn't exist
              const srcDir = path.dirname(OUTPUT_FILE);
              if (!fs.existsSync(srcDir)) {
                fs.mkdirSync(srcDir, { recursive: true });
                console.log(`Created directory: ${srcDir}`);
              }
              
              // Fetch and parse bangs
              const jsContent = await fetchBangs();
              const bangArray = parseBangs(jsContent);
              
              if (!bangArray) {
                console.error('Failed to parse bangs');
                process.exit(1);
              }
              
              // Generate TypeScript file
              const tsContent = generateTypeScriptFile(bangArray);
              
              // Write to file
              fs.writeFileSync(OUTPUT_FILE, tsContent, 'utf8');
              console.log(`Successfully wrote ${bangArray.length} bangs to ${OUTPUT_FILE}`);
              
              // Verify file was created
              if (fs.existsSync(OUTPUT_FILE)) {
                const stats = fs.statSync(OUTPUT_FILE);
                console.log(`File size: ${stats.size} bytes`);
                console.log('✅ Bang list update completed successfully!');
              } else {
                console.error('❌ Failed to create output file');
                process.exit(1);
              }
              
            } catch (error) {
              console.error('❌ Error updating bangs:', error);
              process.exit(1);
            }
          }

          main();
          EOF
          
      - name: Update bang list
        run: node scripts/update-bangs.js
        
      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Files changed:"
            git status --porcelain
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi
          
      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add src/bang.ts
          git commit -m "chore: update bang list from DuckDuckGo API [skip ci]"
          git push
          
      - name: Summary
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          echo "✅ Bang list updated successfully!"
          echo "📊 File stats:"
          ls -lh src/bang.ts 2>/dev/null || echo "File not found"
          echo "🔍 Preview of generated file:"
          head -20 src/bang.ts 2>/dev/null || echo "Could not preview file"
